apiVersion: services.cloud.sap.com/v1
kind: ServiceInstance
metadata:
  name: alert-notif-ser-instance
spec:
  serviceOfferingName: alert-notification
  servicePlanName: standard
  parameters:
    configuration:
      actions:
      - name: email
        properties:
          destination: {{ .Values.alertnotification.email | b64dec }}
        state: ENABLED
        type: EMAIL
      conditions:
      - name: system_down_condition
        predicate: EQUALS
        propertyKey: eventType
        propertyValue: system_down_condition
      subscriptions:
      - actions:
        - email
        conditions:
        - system_down_condition
        name: system_down_condition
        state: ENABLED
---
apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
  name: alert-notif
spec:
  env:
  - name: oauth_url
    valueFrom:
      secretKeyRef:
        key: oauth_url
        name: alert-notif-ser-binding
  - name: client_id
    valueFrom:
      secretKeyRef:
        key: client_id
        name: alert-notif-ser-binding
  - name: client_secret
    valueFrom:
      secretKeyRef:
        key: client_secret
        name: alert-notif-ser-binding
  - name: CLUSTER_DOMAIN
    value: {{ .Values.alertnotification.clusterdomain | b64dec }}
  - name: url
    value: {{ .Values.alertnotification.url | b64dec }}
  deps: "{ \n  \"name\": \"alert-notif-test\",\n  \"version\": \"1.0.0\",\n  \"dependencies\":
    {\n    \"@sap_oss/alert-notification-client\": \"1.1.0\"\n  }\n}"
  runtime: nodejs14
  source: >-
    const { OAuthAuthentication, AlertNotificationClient, BasicAuthentication,
        RegionUtils, Severity, Category } = require("@sap_oss/alert-notification-client");
    const { Region, Platform } =
    require("@sap_oss/alert-notification-client/dist/utils/region");


    const oAuthAuthentication = new OAuthAuthentication({
        username: process.env.client_id,
        password: process.env.client_secret,
        oAuthTokenUrl: process.env.oauth_url
    });

    module.exports = {
      main: async function (event, context) {
          try{
            const client = new AlertNotificationClient({
                authentication: oAuthAuthentication,
                region: new Region(Platform.CF, process.env.url),
            });
            const result =  await processAlert(client, event.data);
            return JSON.stringify(result);
          }catch(error){
              console.log(error);
              return error;
          };
      }
    }

    // data should be a JSON object.
    // There is the possiblity to set these keys:
    // - severity: ["fatal", "info", "notice", "warning", "error"]
    // - category: ["alert", "exception", "notification", "warning"]
    // - email_header: string
    // - details: JSON object

    async function processAlert(client, data){
        console.log("processAlert() data: " + JSON.stringify(data));
        const cur_time = Math.floor(+new Date() / 1000);
        var severity_value = Severity.FATAL;
        switch(data.severity) {
          case "fatal":
            severity_value = Severity.FATAL;
            break;
          case "info":
            severity_value = Severity.INFO;
            break;
          case "notice":
            severity_value = Severity.NOTICE;
            break;
          case "warning":
            severity_value = Severity.WARNING;
            break;
          case "error":
            severity_value = Severity.ERROR;
            break;
          default:
            console.log("Unexpected value for severity in processAlert: " + data.severity);
        }

        var category_value = Category.ALERT;
        switch(data.category) {
          case "alert":
            category_value = Category.ALERT;
            break;
          case "info":
            category_value = Category.EXCEPTION;
            break;
          case "notice":
            category_value = Category.NOTIFICATION;
            break;
          case "warning":
            category_value = Category.WARNING;
            break;
          default:
            console.log("Unexpected value for category in processAlert: " + data.category);
        }

        var email_header = data.email_header || "Message";
        var details = data.details || data;

        return await client.sendEvent({
            body: 'The chatbot reported a ' + severity_value + ' ' + category_value + '. \nDETAILS: ' + JSON.stringify(details).replace(/[{}]|,/g, "\n"),
            subject: 'Chatbot ' + category_value + ': ' + email_header,
            eventType: 'system_down_condition',
            severity: severity_value,
            category: category_value,
            resource: {
                resourceName: 'update-bot',
                resourceType: 'deployment',
                resourceInstance: '1',
                tags: {
                    detailsLink: 'https://grafana.' + process.env.CLUSTER_DOMAIN + '/explore?orgId=1&left=%5B%22now-1h%22,%22now%22,%22Loki%22,%7B%22expr%22:%22%7Bnamespace%3D%5C%22cap%5C%22%7D%22%7D,%7B%7D%5D'
                }
            },
            eventTimestamp: cur_time,
            priority: 1
        });
    }



---
apiVersion: services.cloud.sap.com/v1
kind: ServiceBinding
metadata:
  name: alert-notif-ser-binding
spec:
  serviceInstanceName: alert-notif-ser-instance